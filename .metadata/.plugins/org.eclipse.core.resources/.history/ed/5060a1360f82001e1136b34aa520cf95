package com.laptrinhjavaweb.dao.impl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.laptrinhjavaweb.dao.GenericDAO;
import com.laptrinhjavaweb.mapper.RowMapper;

public class AbstractDAO<T> implements GenericDAO<T> {

	public Connection getConnection() {

		String url = "jdbc:mysql://localhost:3306/newservlet11month2023";
		String username = "root";
		String password = "";

		try {
			Class.forName("com.mysql.jdbc.Driver");
			return DriverManager.getConnection(url, username, password);
		} catch (ClassNotFoundException | SQLException e) {
			return null;
		}
	}

	@Override
	public List<T> query(String sql, RowMapper<T> rowMapper, Object... parameters) {

		List<T> list = new ArrayList<T>();

		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;

		try {
			connection = getConnection();
			preparedStatement = connection.prepareStatement(sql);

			// set parameters nếu có
			setParameter(preparedStatement, parameters);

			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				list.add(rowMapper.mapRow(resultSet));
			}

			return list;

		} catch (SQLException e) {
			return null;
		} finally {

			try {
				if (connection != null) {
					connection.close();
				}
				if (preparedStatement != null) {
					preparedStatement.close();
				}
				if (resultSet != null) {
					resultSet.close();
				}
			} catch (SQLException e) {
				return null;
			}
		}
	}

	// Nếu có parameter trong câu lệnh sql thì set chúng vào đối tượng PreparedStatement trước khi executeQuery()
	private void setParameter(PreparedStatement ps, Object... parameters) {

		try {
			for (int i = 0; i < parameters.length; i++) {
				
				Object parameter = parameters[i];
				int index = i + 1;
				if (parameter instanceof Long) {
					ps.setLong(index, (Long) parameter);
				} else if (parameter instanceof String) {
					ps.setString(index, (String) parameter);
				} else if (parameter instanceof Integer) {
					ps.setInt(index, (Integer) parameter);
				} 
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void update(String sql, Object... parameters) {
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		
		try {
			connection = getConnection();
			connection.setAutoCommit(false);
			preparedStatement = connection.prepareStatement(sql);
			
			setParameter(preparedStatement, parameters);
			
			preparedStatement.executeUpdate();
			connection.commit();
		}catch (SQLException e) {
			if (connection != null) { // nếu connection == null thì khi gọi .roolback() -> error
				// nên ta kiểm tra trước.
				try {
					connection.rollback(); // lỗi xảy ra trong khối try thì reset về trạng thái ban đầu
				} catch (SQLException e1) {
					e1.printStackTrace();
				}
			}

		} finally {   // khi sd xong thì đóng tài nguyên lại -> best practice
			try {
				if (connection != null) {
					connection.close();
				}
				if (preparedStatement != null) {
					preparedStatement.close();
				}
			} catch (SQLException e2) {
				e2.printStackTrace();
			}
		}
	}

	@Override
	public Long insert(String sql, Object... objects) {


		return null;
	}
}
